<?php

/**
 * TicketTrackingEntryTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TicketTrackingEntryTable extends Doctrine_Table {
    /**
     * Returns an instance of this class.
     *
     * @return object TicketTrackingEntryTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TicketTrackingEntry');
    }

    public function createTicketTrackingEntryAsReset($tickectTrackingId, Ticket $ticket)
    {
        $sfUser = sfContext::getInstance()->getUser();

        $TicketTrackingEntry = new TicketTrackingEntry();
        $TicketTrackingEntry->setTicketId($ticket->id);
        $TicketTrackingEntry->setTicketTrackingId($tickectTrackingId);

        $result = array();
        try {
            $lastOwnerId = $ticket->getLastOwner();
            if ($lastOwnerId) {
                $TicketTrackingEntry->status = TicketTrackingEntry::STATUS_EXPIRED;
           //     $ticket->setExpireAt(date('Y-m-d', mktime(0, 0, 0, 12, 31, date('Y'))));
                $ticket->setStatus(Ticket::STATUS_DISABLED);

            	$result['status'] = 'EXPIRED';
            	$result['message'] = sprintf('Ce coupon de %d %s été retiré', $ticket->amount, ($ticket->amount > 1)?sfConfig::get('app_project_currency_plural'):sfConfig::get('app_project_currency_single'));
            } else { // le ticket n'était pas encore enregistré
                throw new Exception('Ce coupon n\'est pas en circulation et ne peut pas être retiré.');
            }
        	$ticket->save();
        	$TicketTrackingEntry->save();
        }
        catch(Exception $e) {
            $result['status'] = 'ERROR';
            $result['message'] = $e->getMessage();
        }

        return $result;
    }
    public function createTicketTrackingEntry($tickectTrackingId, Ticket $ticket, $ActorId)
    {
        $credentialName = 'tracking_advanced';

        $sfUser = sfContext::getInstance()->getUser();

        $TicketTrackingEntry = new TicketTrackingEntry();
        $TicketTrackingEntry->setTicketId($ticket->id);
        $TicketTrackingEntry->setTicketTrackingId($tickectTrackingId);

        $result = array();
        try {
            $lastOwnerId = $ticket->getLastOwner();
            if ($lastOwnerId) {
//                if (strtotime($ticket->expire_at) < time()) {
//                    if (!$sfUser->hasCredential($credentialName)) {
//                        throw new Exception(sprintf('Ce ticket a expiré le %s, il doit être repris', date('d/m/Y', strtotime($ticket->expire_at))));
//                    }
//
//                    $TicketTrackingEntry->status = TicketTrackingEntry::STATUS_EXPIRED;
//                    $ticket->setExpireAt(date('Y-m-d', mktime(0, 0, 0, 12, 31, date('Y'))));
//                    $ticket->setStatus(Ticket::STATUS_DISABLED);
//                    $ticket->save();
//                } else {
                    if ($lastOwnerId == $ActorId) {
                        $TicketTrackingEntry->status = TicketTrackingEntry::STATUS_CONFIRMED;
                    } else {
                        $TicketTrackingEntry->status = TicketTrackingEntry::STATUS_UPDATED;
                        //$lastExpired = strtotime($ticket->expire_at);
                    //    $ticket->setExpireAt(date('Y-m-d', strtotime('+ 3 month')));
                        $ticket->save();
//                    }
                }
            } else { // le ticket n'était pas encore enregistré
                if (!$sfUser->hasCredential($credentialName)) {
                    throw new Exception('Ce ticket n\'est pas en circulation et vous n\'avez pas les permissions nécessaire pour le mettre en circulation');
                }

                $TicketTrackingEntry->status = TicketTrackingEntry::STATUS_NEW;
                // le ticket sort de la banque on le passe donc en enabled
                $ticket->setStatus(Ticket::STATUS_ENABLED);
            //	$ticket->setExpireAt(date('Y-m-d', strtotime('+ 3 month')));
            	$ticket->save();
            }
            $TicketTrackingEntry->save();
            switch ($TicketTrackingEntry->status) {
                case TicketTrackingEntry::STATUS_CONFIRMED:
                    $result['status'] = 'CONFIRMED';
                    $result['message'] = sprintf('Ce coupon de %d %s était déjà chez cet adhérent, il a été confirmé', $ticket->amount, ($ticket->amount > 1)?sfConfig::get('app_project_currency_plural'):sfConfig::get('app_project_currency_single'));
                    break;
                case TicketTrackingEntry::STATUS_EXPIRED:
                    $result['status'] = 'EXPIRED';
                    $result['message'] = sprintf('Ce coupon de %d %s a expiré', $ticket->amount, ($ticket->amount > 1)?sfConfig::get('app_project_currency_plural'):sfConfig::get('app_project_currency_single'));
                    break;
                case TicketTrackingEntry::STATUS_NEW:
                    $result['status'] = 'UNKNOWN';
                    $result['message'] = sprintf('Ce coupon de %d %s viens d\'etre mis en circulation', $ticket->amount, ($ticket->amount > 1)?sfConfig::get('app_project_currency_plural'):sfConfig::get('app_project_currency_single'));
                    break;
                case TicketTrackingEntry::STATUS_UPDATED:
                    $result['status'] = 'UPDATED';
                    $result['message'] = sprintf('Ce coupon de %d %s était chez un autre adhérent', $ticket->amount, ($ticket->amount > 1)?sfConfig::get('app_project_currency_plural'):sfConfig::get('app_project_currency_single'));
                    break;
            } // switch
        }
        catch(Exception $e) {
            $result['status'] = 'ERROR';
            $result['message'] = $e->getMessage();
        }

        return $result;
    }
}